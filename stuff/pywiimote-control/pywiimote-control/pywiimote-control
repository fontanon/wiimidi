#!/usr/bin/python
#
# pywiimote-control: a tiny modular wiimote remote control application
# Copyright (C) 2008  Luca Greco <rpl@salug.it>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

import cwiid
import sys
import time

from modules import *

selected_modules = [wiimidi_guitar] 
module_led_values = [cwiid.LED1_ON, cwiid.LED2_ON, cwiid.LED3_ON, cwiid.LED4_ON] 

current_module_index = 0
active_module = wiimidi_guitar  

def wiictrl_init (wiimote):
    """ initialize wiimote and wiictrl modules """
    global active_module, acc_zero, acc_one
    acc_zero, acc_one = wiimote.get_acc_cal(cwiid.EXT_NONE)
    active_module.init(acc_zero, acc_one)
    wiimote.mesg_callback = wiictrl_callback
    wiimote.rpt_mode = cwiid.RPT_BTN ^ cwiid.RPT_ACC ^cwiid.RPT_NUNCHUK
    wiimote.led = cwiid.LED1_ON
    wiimote.enable(cwiid.FLAG_MESG_IFC)
    while 1:
        time.sleep(0.05)

def wiictrl_cycle_modules (wiimote):
    """ """
    global current_module_index, active_module

    active_module.close()

    if current_module_index < len(selected_modules)-1:
       current_module_index = current_module_index + 1
    else:
       current_module_index = 0

    active_module = selected_modules[current_module_index]
    active_module.init()

    wiimote.led = module_led_values[current_module_index] 

def wiictrl_callback (mesg_list):
    """ wiictrl general callback """
    global active_module
    for mesg in mesg_list:
        if mesg[0] == cwiid.MESG_BTN and mesg[1] == cwiid.BTN_HOME:
               wiictrl_cycle_modules(wiimote) 
        
        active_module.callback(mesg)

def wiictrl_close (wiimote):
    """ close wiimote and wiictrl modules """
    global active_module
    active_module.close()
    wiimote.close()


while 1:
    try:
        print 'Put Wiimote in discoverable mode now (press 1+2)'
        wiimote = cwiid.Wiimote()

        wiictrl_init(wiimote)
    except RuntimeError, inst:
        pass
    except KeyboardInterrupt: ### DON'T WORK
        wiictrl_close(wiimote)
        exit


